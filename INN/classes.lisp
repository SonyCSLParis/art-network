;; Copyright Sony Computer Science Laboratory - Paris
;;           Sofia Baroncini
;;           Luc Steels
;;           Remi van Trijp

;; Licensed under the Apache License, Version 2.0 (the "License");
;; you may not use this file except in compliance with the License.
;; You may obtain a copy of the License at

;;     http://www.apache.org/licenses/LICENSE-2.0

;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;=========================================================================


#|
;; Most of the code below was generated by using the macro define-inn-node
;; and then adapting it:
(in-package :art-network)

(define-inn-node artwork-node 
                 :slots (image)
                 :shape "image")

(define-inn-node sparql-question
                 :include 'narrative-question
                 :slots (on-click)
                 :type :open-narrative-question)
|#

(in-package :art-network)

;;; ---------------------------------------------------------------
;;; 1. ART-NETWORK
;;; ---------------------------------------------------------------

(defclass art-network (integrative-narrative-network)
  ((discourse-model :type 'discourse-model
                    :initform (make-instance 'discourse-model)
                    :initarg :discourse-model
                    :accessor discourse-model
                    :documentation "Pointer to the discourse model that
                                    keeps track of the interactions with
                                    the network."))
  (:documentation "Subclass of INN to allow for method customization."))

;;; ---------------------------------------------------------------
;;; 2. WIKIDATA-ENTITY
;;; ---------------------------------------------------------------

(def-inn-node wikidata-entity-node (inn-image
                                    (type :wikidata-entity)))

(defmethod get-node-shape ((type (eql :wikidata-entity)))
  (declare (ignore type))
  (get-node-shape :inn-image))

;;; ---------------------------------------------------------------
;;; 3. ARTWORK-NODE
;;; ---------------------------------------------------------------

(def-inn-node artwork-node (inn-image
                            (:type :artwork-node)))

(defmethod get-node-shape ((type (eql :artwork-node)))
  (declare (ignore type))
  (get-node-shape :inn-image))

(defmethod inn-format-node ((node artwork-node))
  (declare (ignorable node))
  (call-next-method))
; (inn-format-node (make-artwork-node))

;;; ---------------------------------------------------------------
;;; 4. PROPERTY-NODE
;;; ---------------------------------------------------------------

(def-inn-node property-node (narrative-question))
; (inn-format-node (make-property-node))
